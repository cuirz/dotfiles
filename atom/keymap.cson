# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * http://flight-manual.atom.io/using-atom/sections/basic-customization/#_customizing_keybindings
# * http://flight-manual.atom.io/behind-atom/sections/keymaps-in-depth/
#
# If you're having trouble with your keybindings not working, try the
# Keybinding Resolver: `Cmd+.` on OS X and `Ctrl+.` on other platforms. See the
# Debugging Guide for more information:
# * http://flight-manual.atom.io/hacking-atom/sections/debugging/#check-the-keybindings
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson
".platform-darwin atom-text-editor[data-grammar~=\"go\"]:not([mini])":
    "alt-cmd-g": "golang:godef"
    "alt-cmd-shift-g": "golang:godef-return"

":not(.platform-darwin) atom-text-editor[data-grammar~=\"go\"]:not([mini])":
    "ctrl-g": "golang:godef",
    "alt-ctrl-g": "golang:godef-return"
#
'.platform-win32, .platform-linux':
  'ctrl-t': 'fuzzy-finder:toggle-file-finder'
  'ctrl-p': 'fuzzy-finder:toggle-file-finder'
  'ctrl-b': 'fuzzy-finder:toggle-buffer-finder'
  'ctrl-B': 'fuzzy-finder:toggle-git-status-finder'

'.platform-win32, .platform-linux':
  'ctrl-f': 'find-and-replace:show'

'.platform-win32, .platform-linux atom-text-editor.vim-mode:not(.insert-mode)':
  'alt-p': 'clipboard-plus:toggle'
